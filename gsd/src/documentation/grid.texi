\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename grid.info
@settitle Grid Manual
@c %**end of header

@copying
Copyright @copyright{} 2009, 2010 Liam Healy
@end copying

@titlepage
@title Grid Structured Data
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@node Top
@top Grid Structured Data

This is the manual for the grid structured data suite of Lisp systems.

@insertcopying
@end ifnottex

@menu
* Introduction::        Introduction
* Creating a grid::       Creating a grid
* Operations::    Operations on grids 
* Installation::  Obtaining and installing this software, copyright and license
* Copying::       Copying
* Index::            Complete index
@end menu

@c Output the table of the contents at the beginning.
@contents

@node Introduction
@chapter Introduction

@section The grid concept

In scientific and engineering computing, data is frequently organized
into a regular pattern indexed by a finite sequence of integers, and
thought of having a Cartesian arrangement.  We call this @dfn{grid
structured data}.  A standard form is the @dfn{array}, but we do not
wish to confine ourselves to representation in terms of
@url{http://www.lispworks.com/documentation/lw50/CLHS/Body/t_array.htm,a
Common Lisp array}.  Other examples might be a list of lists, a C array
accessible through a foreign function interface, or an SQL table.
We assume a rectangular shape; that is, the range of indices permissible
is independent of the other values of the index.  Each node of the grid
is an @dfn{element}.

Since we are primarily focused on the scientific and engineering
applications, the elements will generally be numbers of some type.  Most
of the definitions in this collection however do not force this to be
the case.

The @dfn{rank} of a grid is the number of Cartesian axes, and the
@dfn{dimensions} are sequence of non-negative integers of length equal
to the rank that give the number of index values possible along each
axis.  For example, a matrix representing rotations in three dimensional
space would have rank 2 and dimensions (3 3).

@section Systems

In this collection are several
@url{http://www.cliki.net/ASDF%20system,ASDF systems} that define
common operations for grids and specific representation of grid
structured data.  The base system
@cindex grid
@command{grid} defined in
@file{gsd/grid/grid.asd} defines common operations, and sets up built-in
Common Lisp objects such as arrays and lists as grid structured data.
The system
@cindex foreign-array
@command{foreign-array}
uses @url{http://common-lisp.net/project/cffi/,@command{CFFI}} to allow the use
of C arrays as grid.

The systems available are:

@itemize @bullet
@item @command{grid}@*
Definition of @ref{Operations} and grid structured
data that is completely represented by Common Lisp data structures.
@item @command{grid-tests}@*
A regression test suite for @command{grid} which uses
@url{http://repo.or.cz/w/lisp-unit.git,@command{lisp-unit}}.
@item @command{foreign-array}@*
Use C (row-major) arrays in foreign libraries from Lisp; requires
@url{http://common-lisp.net/project/cffi,@command{CFFI}}. 
@item @command{foreign-array-tests}@*
A regression test suite for @command{foreign-array} which uses
@url{http://repo.or.cz/w/lisp-unit.git,@command{lisp-unit}}.
@item @command{grid-iterate-extension}@*
Use the @url{http://common-lisp.net/project/iterate/,@command{iterate}} system
for iterating over parts of grids; requires
@url{http://common-lisp.net/project/asdf-system-connections,@command{asdf-system-connnections}}.
@end itemize

@node Creating a grid
@chapter Creating a grid

@cindex creating

@section The @command{grid} System
In the @command{grid} system, the only defined grid is an ordinary
(Common Lisp) array, and this may be created in the usual fashion, with
the @code{#} reader macro
@example
#(1.0d0 2.0d0 3.0d0)
@end example
or with @code{make-array}.

@section The @command{foreign-array} System
The @command{foreign-array} system adds foreign arrays, and they may be
created with the @code{#m} reader macro, or with
@code{make-foreign-array}.  The #m reader macro in the default form
creates a vector or matrix of element type double-float, which is the
most common type needed for mathematical functions.  It optionally takes
a numeric argument prefix to make an array with a different element
type; a guide to the numeric argument is given below.  It should be
followed by a list; this list will be evaluated.  If the list contains
@code{^}, the object created will be a matrix and each row is ended with
that symbol.

Classes of vectors and matrices are named by appending the element
type as hypenated words to "vector" or "matrix".  The following table
shows the classes available on a 64-bit platform:
@multitable @columnfractions 0.2 0.2 0.2 0.2
     @headitem Element type @tab Vector class @tab Matrix class @tab #m prefix
     @item double-float
     @tab @code{vector-double-float}
     @tab @code{matrix-double-float}
     @tab 1 or empty
     @item (complex double-float)
     @tab @code{vector-complex-double-float}
     @tab @code{matrix-complex-double-float}
     @tab 2
     @item single-float
     @tab @code{vector-single-float}
     @tab @code{matrix-single-float}
     @tab 3
     @item (complex single-float)
     @tab @code{vector-complex-single-float}
     @tab @code{matrix-complex-single-float}
     @tab 4
     @item (signed-byte 8)
     @tab @code{vector-signed-byte-8}
     @tab @code{matrix-signed-byte-8}
     @tab 7
     @item (unsigned-byte 8)
     @tab @code{vector-unsigned-byte-8}
     @tab @code{matrix-unsigned-byte-8}
     @tab 8
     @item (signed-byte 16)
     @tab @code{vector-signed-byte-16}
     @tab @code{matrix-signed-byte-16}
     @tab 15
     @item (unsigned-byte 16)
     @tab @code{vector-unsigned-byte-16}
     @tab @code{matrix-unsigned-byte-16}
     @tab 16
     @item (signed-byte 32)
     @tab @code{vector-signed-byte-32}
     @tab @code{matrix-signed-byte-32}
     @tab 31
     @item (unsigned-byte 32)
     @tab @code{vector-unsigned-byte-32}
     @tab @code{matrix-unsigned-byte-32}
     @tab 32
     @item (signed-byte 64)
     @tab @code{vector-signed-byte-64}
     @tab @code{matrix-signed-byte-64}
     @tab 63
     @item (unsigned-byte 64)
     @tab @code{vector-unsigned-byte-64}
     @tab @code{matrix-unsigned-byte-64}
     @tab 64
     @end multitable

Individual elements are obtained using @code{grid:gref} (analogous to
Lisp's @code{aref}), and are set with @code{setf grid:gref}.

Copying is performed with the function <code>copy</code>.
This works between @code{grid:foreign-array}s, pointers, and CL arrays.
There are two functions provided to extract the dimensions of a
vector or array: @code{dim0} and @code{dim1}; the latter
is applicable only for matrices.  If you
use @url{http://common-lisp.net/project/iterate/,@command{iterate}}
system, there are extensions defined that make it easier to iterate over 
grids: @code{matrix-row}, @code{matrix-row-index},
@code{matrix-column}, @code{matrix-column-index},
@code{vector-element}, @code{vector-element-index},
@code{matrix-element}, @code{matrix-element-index},
For example,
@example
(defparameter m1 #m(1 2 3 ^ 0 6 8))
(iter:iter (iter:for e :matrix-element m1) (princ e) (princ " "))
1.0 2.0 3.0 0.0 0.0 6.0 8.0
@end example

@node Operations
@chapter Operations

@cindex operations

@section Summary of defined operations
There are many operations that are common to all grid structured data.
They transform or compose grids to make new grids.
@itemize
@item
@cindex drop
@code{drop}: remove singleton axes and create a grid of lower rank than
the original grid.
@item
@cindex subgrid
@code{subgrid}, @code{(setf subgrid)}: select or set a region within a
grid as a grid
@item
@cindex codimension-one-subspace
@code{codimension-one-subspace},
@code{(setf codimension-one-subspace)}
@item
@cindex row
@code{row}, @code{(setf row)}
Select or set the row of a matrix.
@item
@cindex column
@code{column}, @code{(setf column)}
Select or set the column of a matrix.
@item
@code{transpose}
@cindex transpose
Exchange elements paired by exchange of indices.
@item
@code{diagonal}, @code{(setf diagonal)}
@cindex diagonal
Get or set the part of the grid where two indices are equal or differ by
a constant to another grid.
@item
@code{set-diagonal}
@cindex set-diagonal
Set the diagonal of a grid to a fixed value or to a function of its
indices. 
@item
@code{identity-matrix}
@cindex identity-matrix
Create a matrix that is a scalar multiple of the identity.
@item
@code{concatenate-grids}
@cindex concatenate-grids
Concatenate the grids along the axis specified.
@item
@code{slice}
@cindex slice
Select slice(s) from a grid.
@end itemize

@section General elementwise operations
There are two more general functions @code{map-grid} and
@code{map-n-grids} on which the above functions are defined.  They will
provide the basis for any elementwise mapping of one (for the former) or
several (for the latter) grids into a destination grid.

@subsection @code{map-grid}
Although this function has other uses, it can be used to create a grid
using a function of the index values.  For example, 
in the file @file{gsd/grid/tests/grids.lisp} is a function
@code{index-fill-decadal} that multiplies increasing powers of ten by
each argument in succession, and adds the result.  The array
@code{*array-3-4-double-float*} is created with this function: 
@example
(defparameter *array-3-4-double-float*
  (map-grid :source 'index-fill-decadal :source-dims '(3 4)))
@end example
which gives
@example
*array-3-4-double-float*
#2A((0.0d0 1.0d0 2.0d0 3.0d0)
    (10.0d0 11.0d0 12.0d0 13.0d0)
    (20.0d0 21.0d0 22.0d0 23.0d0))
@end example
(see also the function 'test-grid-double-float).

Take the square root of every element of an array:
@example
(map-grid :source #m((0.0d0 1.0d0 2.0d0) (10.0d0 11.0d0 12.0d0) (20.0d0 21.0d0 22.0d0)) :element-function 'sqrt)
@end example

@subsection @code{map-n-grids}
This is a more general form of @code{map-grid} which can take multiple
source grids, instead of only one.
For example, combine arrays a and b as a+2b:
@example
(map-n-grids :sources `((,#31m(1 2 3) nil) (,#31m(9 8 7) nil))
             :combination-function (lambda (a b) (+ a (* 2 b))))
@end example

@section Creation functions
In addition to the techniques for creating grids described above, 
the functions @code{make-grid} and @code{make-foreign-array} are
defined.  The functions @code{map-grid} and @code{map-n-grids}
can be used to create grids from functions of indices.

@subsection @code{make-grid}
This is used for making any kind of grid with the same value for each
element, or with literally specified values.  The first argument is a
specification, which has the form @code{((grid-type dimensions)
element-type)}.  The keyword arguments are @code{:initial-element} or
@code{:initial-contents}.  For example,
@example
(make-foreign-array 'double-float :dimensions 3 :initial-element 77.0d0)
#m(77.0d0 77.0d0 77.0d0)
(make-grid '((foreign-array 3) double-float) :initial-element 77.0d0)
#m(77.0d0 77.0d0 77.0d0)
@end example

@subsection @code{make-foreign-array}
This function can be used instead of @code{make-grid} to make a
foreign-array; the first argument is the @code{element-type} and the
@code{:dimensions} are supplied in a keyword argument, for example, 

@subsection Mapping functions
Make a foreign vector with each element the square root of its index:
@example
(map-grid :source 'sqrt :destination-specification '((foreign-array 6) double-float))
@end example

@section AFFI
@code{extrude} will transform an AFFI into one that will make it appear
that the grid has an extra dimension.  This is useful in
e.g. @code{map-n-grids}.

@section Composition functions
@subsection @code{drop}
Define the CL array on double float elements:
@example
(test-grid-double-float 'array '(5 1))
#2A((0.0d0) (10.0d0) (20.0d0) (30.0d0) (40.0d0))
@end example
to reduce this to a vector (one dimensional array), 
@example
(drop (test-grid-double-float 'array '(5 1)))
#(0.0d0 10.0d0 20.0d0 30.0d0 40.0d0)
@end example

@subsection @code{row}
Select the second row from the matrix above:
@example
(row (test-grid-double-float 'array '(3 4)) 1)
#(10.0d0 11.0d0 12.0d0 13.0d0)
@end example

@subsection @code{column}
The first column of the above array is 
@example
(column (test-grid-double-float 'array '(3 4)) 0)
#(0.0d0 10.0d0 20.0d0)
@end example

@subsection @code{subgrid}
The 2 by 2 block starting at index 1,2 in the previous matrix is
@example
(subgrid (test-grid-double-float 'array '(3 4)) '(2 2) '(1 2))
#2A((12.0d0 13.0d0) (22.0d0 23.0d0))
@end example

@subsection @code{transpose}
The transpose of the above array is
@example
(transpose (test-grid-double-float 'array '(3 4)))
#2A((0.0d0 10.0d0 20.0d0)
    (1.0d0 11.0d0 21.0d0)
    (2.0d0 12.0d0 22.0d0)
    (3.0d0 13.0d0 23.0d0))
@end example

@subsection @code{diagonal}
The diagonal is the collection of elements where there are two indices
equal, or differ by a fixed amount.  For a matrix (two dimensional
array), this would be for example:
@example
(diagonal (test-grid-double-float 'array '(3 4)))
#(0.0d0 11.0d0 22.0d0)
@end example
The superdiagonal is accessible with the same function, 
@example
(diagonal (test-grid-double-float 'array '(3 4)) :offset 1)
#(1.0d0 12.0d0 23.0d0)
@end example
as is the subdiagonal,
@example
(diagonal (test-grid-double-float 'array '(3 4)) :offset -1)
#(10.0d0 21.0d0)
@end example

@subsection @code{concatenate-grids}
This function is used to join two grids on an axis whose dimensions are
the same on the other axes.  For example, join two matrices by
adjoining their columns, all of the same length:
@example
(map-grid :source (offset-ifd 0.5d0) :source-dims '(3 4))
#2A((0.5d0 1.5d0 2.5d0 3.5d0)
    (10.5d0 11.5d0 12.5d0 13.5d0)
    (20.5d0 21.5d0 22.5d0 23.5d0))
(map-grid :source (offset-ifd 0.1d0) :source-dims '(3 2))
#2A((0.1d0 1.1d0) (10.1d0 11.1d0) (20.1d0 21.1d0))
(concatenate-grids ** * :axis 1)
#2A((0.5d0 1.5d0 2.5d0 3.5d0 0.1d0 1.1d0)
    (10.5d0 11.5d0 12.5d0 13.5d0 10.1d0 11.1d0)
    (20.5d0 21.5d0 22.5d0 23.5d0 20.1d0 21.1d0))
@end example

@subsection @code{slice}
A @dfn{slice} is a subgrid.
@example
(slice (test-grid-double-float 'array '(3 4)) '(1 (:range 0 2)) :drop nil)
#2A((10.0d0 11.0d0 12.0d0))
@end example

@subsection Vector products
@code{cross},
@code{inner}, 
@code{euclidean}, 
@code{norm}, 
@code{normalize}.

@section Iteration
Extensions to the @url{http://common-lisp.net/project/iterate/,@command{iterate}}
system are provided in the @command{grid-iterate-extension}
system which will automatically load if 
@url{http://common-lisp.net/project/asdf-system-connections,@command{asdf-system-connnections}},
@url{http://common-lisp.net/project/iterate/,@command{iterate}}, and
the @command{grid} system are loaded.

@node Installation
@chapter Download and installation

@cindex installation
The gitweb page is @url{http://repo.or.cz/w/gsd.git}.  To download,
@example
@code{git clone git://repo.or.cz/gsd.git}
@end example

The @code{grid} system depends on 
@url{http://common-lisp.net/project/alexandria/,alexandria}
and the @code{foreign-array} system depends on
@url{http://common-lisp.net/project/cffi/,cffi},
@url{http://www.cliki.net/trivial-garbage,trivial-garbage}, and
@url{http://www.cliki.net/SPLIT-SEQUENCE,split-sequence}.
In addition, there are two optional systems, 
@url{http://repo.or.cz/w/fsbv.git,FSBV}, which permits usage of foreign
arrays of complex number elements, and
@url{http://gitorious.org/iolib/static-vectors,static-vectors} gives 
foreign arrays a native Lisp view via the function @code{cl-array} for
foreign arrays made in Lisp (not created in foreign code) for supported
implementations (currently SBCL, CCL, ECL, LispWorks, and Allegro).

Install 

@node Copying
@chapter Copying

@cindex copying
All code and documentation in this collection is copyright as indicated
at the top of this document.  It may be copied under the
@url{http://www.gnu.org/licenses/gpl.html,GPL v3}.

@node Index
@unnumbered Index

@printindex cp

@bye
